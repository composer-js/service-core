openapi: 3.1.0
info:
  version: "1.0"
paths:
  /status:
    x-name: StatusRoute
    get:
      description: Returns information about the service and it's operational status.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: object
      x-name: get
  /admin/clear-cache:
    x-name: AdminRoute
    get:
      description: Flushes the second-level cache so that subsequent requests will
        pull directly from the database.
      responses:
        "204":
          description: No Content
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: clearCache
  /admin/inspect.websocket:
    x-name: AdminRoute
    x-upgrade: true
    get:
      description: Establishes a connection to the remote NodeJS debug inspector.
      responses:
        "204":
          description: No Content
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: inspect
  /admin/logs.websocket:
    x-name: AdminRoute
    x-upgrade: true
    get:
      description: Establishes a connection to the live log socket.
      responses:
        "204":
          description: No Content
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: logs
  /admin/release-notes:
    x-name: AdminRoute
    get:
      description: Returns the release notes file for the service.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            text/x-rst:
              schema:
                type: string
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            text/x-rst:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: get
  /admin/restart:
    x-name: AdminRoute
    get:
      description: Immediately restarts the service.
      responses:
        "204":
          description: No Content
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: restart
  /acls:
    x-schema: AccessControlListMongo
    x-name: _a
    post:
      description: Creates one or more access control lists.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/AccessControlListMongo"
                - type: array
                  items:
                    $ref: "#/components/schemas/AccessControlListMongo"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/AccessControlListMongo"
                  - type: array
                    items:
                      $ref: "#/components/schemas/AccessControlListMongo"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: create
    put:
      description: Saves modifications for the given collection of access control lists.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AccessControlListMongo"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessControlListMongo"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: updateBulk
    head:
      description: Returns the total number of access control lists matching the given
        search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: count
    get:
      description: Returns a collection of access control lists matching the given
        search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                  - $ref: "#/components/schemas/AccessControlListMongo"
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: findAll
  /acls/:id:
    parameters:
      - $ref: "#/components/parameters/id"
    x-schema: AccessControlListMongo
    x-name: _a
    delete:
      description: Deletes the access control list with the given unique identifier
        and optional version.
      parameters:
        - $ref: "#/components/parameters/version"
      responses:
        "204":
          description: No Content
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: delete
    get:
      description: Returns the access control list with the given unique identifier.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessControlListMongo"
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: findById
    put:
      description: Saves modifications to existing access control list with the given
        unique identifier.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessControlListMongo"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessControlListMongo"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: update
  /:
    x-name: OpenAPIRoute
    get:
      description: Returns the OpenAPI specification for the service in HTML format.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            text/html:
              schema:
                type: string
      x-name: getHTML
  /openapi.json:
    x-name: OpenAPIRoute
    get:
      description: Returns the OpenAPI specification for the service in JSON format.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: string
      x-name: getJSON
  /openapi.yaml:
    x-name: OpenAPIRoute
    get:
      description: Returns the OpenAPI specification for the service in YAML format.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            text/yaml:
              schema:
                type: string
      x-name: getYAML
  /metrics:
    x-name: MetricsRoute
    get:
      description: Returns all Prometheus metrics emitted by this service.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            text/plain; version=0.0.4; charset=utf-8:
              schema:
                type: string
      x-name: getMetrics
  /metrics/:metric:
    parameters:
      - name: metric
        in: path
        required: true
        schema:
          type: string
    x-name: MetricsRoute
    get:
      description: Returns the Prometheus metric emitted by this service with the
        given name.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            text/plain; version=0.0.4; charset=utf-8:
              schema:
                type: string
      x-name: getSingleMetric
  /cachedusers:
    x-schema: models.CacheUser
    x-name: routes.CacheUserRoute
    head:
      description: Returns the total number of user accounts matching the given search
        criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: count
    post:
      description: Creates a new user account.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/models.CacheUser"
                - type: array
                  items:
                    $ref: "#/components/schemas/models.CacheUser"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/models.CacheUser"
                  - type: array
                    items:
                      $ref: "#/components/schemas/models.CacheUser"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: create
    get:
      description: Returns all user accounts matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.CacheUser"
      x-name: findAll
    delete:
      description: Deletes all existing user accounts matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: truncate
  /cachedusers/:id:
    parameters:
      - $ref: "#/components/parameters/id"
    x-schema: models.CacheUser
    x-name: routes.CacheUserRoute
    delete:
      description: Deletes an existing user account.
      responses:
        "204":
          description: No Content
      x-name: delete
    get:
      description: Returns the user account with the given unique identifier.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.CacheUser"
      x-name: findById
    put:
      description: Updates an existing user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.CacheUser"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.CacheUser"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: update
  /hello:
    x-name: routes.DefaultRoute
    get:
      description: Returns `Hello World!`.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: object
      x-name: helloWorld
  /token:
    x-name: routes.DefaultRoute
    get:
      description: Returns the user data for a valid authenticated user.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: authToken
  /error:
    x-name: routes.DefaultRoute
    get:
      description: Throws a 400-level error and returns the error as the response body.
      responses:
        "204":
          description: No Content
      x-name: throwError
  /connect.websocket:
    x-name: routes.DefaultRoute
    x-upgrade: true
    get:
      description: Establishes a socket connection that responds to all messages with
        `echo ${msg}`.
      responses:
        "204":
          description: No Content
      x-name: wsConnect
  /connect-secure.websocket:
    x-name: routes.DefaultRoute
    x-upgrade: true
    get:
      description: Establishes a secured socket connection that responds to all
        messages with `echo ${msg}`.
      responses:
        "204":
          description: No Content
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: wsConnectSecure
  /connect-query.websocket:
    x-name: routes.DefaultRoute
    x-upgrade: true
    get:
      description: Establishes a socket connection that responds to all messages with
        the query message and message `echo ${message} ${msg}` or `echo ${msg}`.
      parameters:
        - name: wsConnectQuery
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: wsConnectQuery
  /items:
    x-schema: models.Item
    x-name: routes.ItemRoute
    head:
      description: Returns the total number of items matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: count
    post:
      description: Creates a new item.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/models.Item"
                - type: array
                  items:
                    $ref: "#/components/schemas/models.Item"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/models.Item"
                  - type: array
                    items:
                      $ref: "#/components/schemas/models.Item"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: create
    get:
      description: Returns all items matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.Item"
      x-name: findAll
    delete:
      description: Deletes all existing items matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: truncate
  /items/:id:
    parameters:
      - $ref: "#/components/parameters/id"
    x-schema: models.Item
    x-name: routes.ItemRoute
    delete:
      description: Deletes an existing item.
      responses:
        "204":
          description: No Content
      x-name: delete
    get:
      description: Returns the item with the given unique identifier.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.Item"
      x-name: findById
    put:
      description: Updates an existing item.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.Item"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.Item"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: update
  /protected/hello:
    x-name: routes.ProtectedRoute
    get:
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: helloWorld
  /protected/foobar:
    x-name: routes.ProtectedRoute
    get:
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: foobar
  /protected/roletest:
    x-name: routes.ProtectedRoute
    get:
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: roletest
  /protected/token:
    x-name: routes.ProtectedRoute
    get:
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "401":
          description: Returned when a valid authentication token is not provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - jwt: []
      x-name: authToken
  /users:
    x-schema: models.User
    x-name: routes.UserRoute
    head:
      description: Returns the total number of user accounts matching the given search
        criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: count
    post:
      description: Creates a new user account.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/models.User"
                - type: array
                  items:
                    $ref: "#/components/schemas/models.User"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/models.User"
                  - type: array
                    items:
                      $ref: "#/components/schemas/models.User"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: create
    put:
      description: Updates multiple user accounts in bulk.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/models.User"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.User"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: updateBulk
    get:
      description: Returns all user accounts matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.User"
      x-name: findAll
    delete:
      description: Deletes all existing user accounts matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: truncate
  /users/:id:
    parameters:
      - $ref: "#/components/parameters/id"
    x-schema: models.User
    x-name: routes.UserRoute
    delete:
      description: Deletes an existing user account.
      responses:
        "204":
          description: No Content
      x-name: delete
    head:
      description: Returns a boolean integer indicating whether or not a user account
        with the given unique identifier exists.
      responses:
        "204":
          description: No Content
      x-name: exists
    x-after:
      - cleanPII
    get:
      description: Returns the user account with the given unique identifier.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.User"
      x-name: findById
    x-before:
      - validate
    put:
      description: Updates an existing user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.User"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: update
  /users/:id/:property:
    parameters:
      - $ref: "#/components/parameters/id"
      - name: property
        in: path
        required: true
        schema:
          type: string
    x-before:
      - validate
    x-schema: models.User
    x-name: routes.UserRoute
    put:
      description: Updates a single property of an existing user account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.User"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: updateProperty
  /userswithacl:
    x-schema: models.ProtectedUser
    x-name: routes.UserWithACLRoute
    head:
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: count
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.ProtectedUser"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: create
    get:
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: findAll
    delete:
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: truncate
  /userswithacl/:id:
    parameters:
      - $ref: "#/components/parameters/id"
    x-schema: models.ProtectedUser
    x-name: routes.UserWithACLRoute
    delete:
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: delete
    get:
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: findById
    x-before:
      - validate
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.ProtectedUser"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: promise
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Returnedwhentheuserdoesnothavepermissiontoperformthisaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: update
  /versionedusers:
    x-schema: models.VersionedUser
    x-name: routes.VersionedUserRoute
    head:
      description: Returns the total number of user accounts matching the given search
        criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: count
    post:
      description: Creates a new user account.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/models.VersionedUser"
                - type: array
                  items:
                    $ref: "#/components/schemas/models.VersionedUser"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/models.VersionedUser"
                  - type: array
                    items:
                      $ref: "#/components/schemas/models.VersionedUser"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: create
    get:
      description: Returns all user accounts matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.VersionedUser"
      x-name: findAll
    delete:
      description: Deletes all existing user accounts matching the given search criteria.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/sort"
      responses:
        "204":
          description: No Content
      x-name: truncate
  /versionedusers/:id:
    parameters:
      - $ref: "#/components/parameters/id"
    x-schema: models.VersionedUser
    x-name: routes.VersionedUserRoute
    delete:
      description: Deletes an existing user account.
      parameters:
        - $ref: "#/components/parameters/version"
        - name: delete
          in: query
          schema:
            type: string
      responses:
        "204":
          description: No Content
      x-name: delete
    get:
      description: Returns the user account with the given unique identifier.
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.VersionedUser"
      x-name: findById
    put:
      description: Updates an existing user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.VersionedUser"
      responses:
        "200":
          description: Returned when the operation is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.VersionedUser"
        "400":
          description: Returned when the request content is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-name: update
components:
  schemas:
    Error:
      description: Describes an error that has occurred within the service.
      type: object
      properties:
        message:
          description: The textual description of the error.
          type: string
        stack:
          description: The stack trace of the error. Only available when `environment` is
            set to `dev`.
          type: object
        status:
          description: The HTTP status code of the error.
          type: number
          example: 400
    models.CacheUser:
      description: The CacheUser class describes a user within the system that
        utilizes the second-level caching system.
      type: object
      properties:
        uid:
          default: randomUUID()
          description: The universally unique identifier of the entity.
          type: string
          x-identifier: true
        dateCreated:
          default: new Date()
          description: The date and time that the entity was created.
          format: date
          type: string
        dateModified:
          default: new Date()
          description: The date and time that the entity was last modified.
          format: date
          type: string
        version:
          default: 0
          description: The optimistic lock version.
          type: number
        firstName:
          default: ""
          description: The first name of the user.
          type: string
        lastName:
          default: ""
          description: The surname of the user.
          type: string
        age:
          default: 0
          description: The age of the user.
          type: number
      required:
        - uid
        - dateCreated
        - dateModified
        - version
        - firstName
        - lastName
        - age
      x-baseClass: BaseMongoEntity
      x-cache: 30
      x-datastore: mongodb
    models.Item:
      description: An Item describes a resource within the system that is used by a player.
      type: object
      properties:
        uid:
          default: randomUUID()
          description: The universally unique identifier of the entity.
          type: string
          x-identifier: true
        dateCreated:
          default: new Date()
          description: The date and time that the entity was created.
          format: date
          type: string
        dateModified:
          default: new Date()
          description: The date and time that the entity was last modified.
          format: date
          type: string
        version:
          default: 0
          description: The optimistic lock version.
          type: number
        name:
          default: ""
          description: The unique name of the item.
          type: string
          x-identifier: true
        quantity:
          default: 0
          description: The amount of the item that exists.
          type: number
        cost:
          default: 0
          description: The cost that must be paid by the user to acquire the item.
          type: number
      required:
        - uid
        - dateCreated
        - dateModified
        - version
        - name
        - quantity
        - cost
      x-baseClass: BaseEntity
      x-datastore: sqlite
    models.Player:
      description: The player of a game.
      type: object
      properties:
        uid:
          default: randomUUID()
          description: The universally unique identifier of the entity.
          type: string
          x-identifier: true
        dateCreated:
          default: new Date()
          description: The date and time that the entity was created.
          format: date
          type: string
        dateModified:
          default: new Date()
          description: The date and time that the entity was last modified.
          format: date
          type: string
        version:
          default: 0
          description: The optimistic lock version.
          type: number
        name:
          default: ""
          description: The unique identifier of the user.
          type: string
          x-identifier: true
        firstName:
          default: ""
          description: The first name of the user.
          type: string
        lastName:
          default: ""
          description: The surname of the user.
          type: string
        age:
          default: 0
          description: The age of the user. Must be 13 or older.
          type: number
        productUid:
          description: The uuid of the product that is associated with this user.
          type: string
          x-identifier: true
        uType:
          oneOf:
            - type: string
            - type: number
        skillRating:
          default: 1500
          description: The skill ranking of the player.
          type: number
      required:
        - uid
        - dateCreated
        - dateModified
        - version
        - name
        - firstName
        - lastName
        - age
        - skillRating
      x-baseClass: models.User
      x-datastore: mongodb
    models.ProtectedUser:
      type: object
      properties:
        uid:
          default: randomUUID()
          description: The universally unique identifier of the entity.
          type: string
          x-identifier: true
        dateCreated:
          default: new Date()
          description: The date and time that the entity was created.
          format: date
          type: string
        dateModified:
          default: new Date()
          description: The date and time that the entity was last modified.
          format: date
          type: string
        version:
          default: 0
          description: The optimistic lock version.
          type: number
        name:
          default: ""
          type: string
          x-identifier: true
        firstName:
          default: ""
          type: string
        lastName:
          default: ""
          type: string
        age:
          default: 0
          type: number
      required:
        - uid
        - dateCreated
        - dateModified
        - version
        - name
        - firstName
        - lastName
        - age
      x-baseClass: BaseMongoEntity
      x-datastore: mongodb
    models.User:
      description: The User class describes a user within the system.
      type: object
      properties:
        uid:
          default: randomUUID()
          description: The universally unique identifier of the entity.
          type: string
          x-identifier: true
        dateCreated:
          default: new Date()
          description: The date and time that the entity was created.
          format: date
          type: string
        dateModified:
          default: new Date()
          description: The date and time that the entity was last modified.
          format: date
          type: string
        version:
          default: 0
          description: The optimistic lock version.
          type: number
        name:
          default: ""
          description: The unique identifier of the user.
          type: string
          x-identifier: true
        firstName:
          default: ""
          description: The first name of the user.
          type: string
        lastName:
          default: ""
          description: The surname of the user.
          type: string
        age:
          default: 0
          description: The age of the user. Must be 13 or older.
          type: number
        productUid:
          description: The uuid of the product that is associated with this user.
          type: string
          x-identifier: true
        uType:
          oneOf:
            - type: string
            - type: number
      required:
        - uid
        - dateCreated
        - dateModified
        - version
        - name
        - firstName
        - lastName
        - age
      x-baseClass: BaseMongoEntity
      x-datastore: mongodb
    models.VersionedUser:
      description: The User class describes a user within the system that utilizes
        document versioning.
      type: object
      properties:
        uid:
          default: randomUUID()
          description: The universally unique identifier of the entity.
          type: string
          x-identifier: true
        dateCreated:
          default: new Date()
          description: The date and time that the entity was created.
          format: date
          type: string
        dateModified:
          default: new Date()
          description: The date and time that the entity was last modified.
          format: date
          type: string
        version:
          default: 0
          description: The optimistic lock version.
          type: number
        deleted:
          default: false
          type: boolean
        name:
          default: ""
          description: The unique identifier of the user.
          type: string
          x-identifier: true
        firstName:
          default: ""
          description: The first name of the user.
          type: string
        lastName:
          default: ""
          description: The surname of the user.
          type: string
        age:
          default: 0
          description: The age of the user.
          type: number
      required:
        - uid
        - dateCreated
        - dateModified
        - version
        - deleted
        - name
        - firstName
        - lastName
        - age
      x-baseClass: RecoverableBaseMongoEntity
      x-datastore: mongodb
      x-versioned: -1
    AccessControlListMongo:
      description: >-
        The access control list provides a generic interface for the storage of
        user and roles permissions. Each ACL object
         represents the permission set for a single entity within the system. The entity is identified generically by its
         universally unique identifier (`uuid`). Each entry in the ACL records the permissions available to a particular user
         or role.

         Each permission can be one of the following actions:
         - `Create` - The user or role can create a new record or object.
         - `Read` - The user or role can read the record or object.
         - `Update` - The user or role can modify existing records or objects.
         - `Delete` - The user or role can delete existing records or objects.
         - `Special` - The user or role has special prilieges to edit the ACL permissions.
         - `Full` - The user or role has total control over the record or object and supersedes any of the above.

         For each of the above actions the user or role will be granted either an `allow` permission or a `deny` permission.
         If an `allow` is granted, the user or role has permission to perform that action. If a `deny` is set, then the user
         or role is denied that action. If no explicit `allow` or `deny` is set then the user or role will inherit the
         permission from a parent role or ACL.

         ACLs can be chained via single inheritance through the specification of the `parentUid`. This allows the ability to
         create complex trees of permissions that can easily inherit control schemes to make the definition of permissions
         easier.
      type: object
      properties:
        uid:
          default: randomUUID()
          description: The universally unique identifier of the entity.
          type: string
          x-identifier: true
        dateCreated:
          default: new Date()
          description: The date and time that the entity was created.
          format: date
          type: string
        dateModified:
          default: new Date()
          description: The date and time that the entity was last modified.
          format: date
          type: string
        version:
          default: 0
          description: The optimistic lock version.
          type: number
        records:
          default: []
          description: The list of all permission records associated with this access
            control list.
          type: array
          items:
            $ref: "#/components/schemas/ACLRecordMongo"
      required:
        - uid
        - dateCreated
        - dateModified
        - version
        - records
      x-baseClass: BaseMongoEntity
      x-cache: 3600
      x-datastore: acl
  responses: {}
  parameters:
    id:
      description: The unique identifier of the resource.
      name: id
      in: path
      required: true
      schema:
        type: string
    page:
      description: The index of the current page when retrieving paginated results.
      name: page
      in: query
      required: false
      schema:
        type: number
    limit:
      description: The maximum number of records to retrieve.
      name: limit
      in: query
      required: false
      schema:
        type: number
    sort:
      description: The property and direction with which to sort the results by.
      name: sort
      in: query
      required: false
      schema:
        oneOf:
          - description: The name of the property to sort by, in ascending order.
            type: string
            example: propertyName
          - description: The name of the property to sort by, in ascending order.
            type: object
            example:
              <propertyName>: <direction>
    version:
      description: The unique version of the resource.
      name: version
      in: query
      required: false
      schema:
        type: number
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://localhost
